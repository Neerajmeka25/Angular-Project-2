Got it! You want to create a multi-step modal form where each step collects different sets of data, and then saves all the data at the end. Here's how you can implement that in Angular using reactive forms.

Step 1: Set Up Your Component
You’ll need a main component to control the steps and store the data. Here’s an outline for your job-application-modal.component.ts:

typescript
Copy code
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-job-application-modal',
  templateUrl: './job-application-modal.component.html',
  styleUrls: ['./job-application-modal.component.css']
})
export class JobApplicationModalComponent implements OnInit {
  applicationForm: FormGroup;
  currentStep: number = 0;
  steps = [
    { title: 'Step 1: Experience', fields: ['yearsOfExperience'] },
    { title: 'Step 2: Skills', fields: ['skills'] },
    { title: 'Step 3: Availability', fields: ['availability'] }
  ];

  constructor(private fb: FormBuilder) {
    this.applicationForm = this.fb.group({
      yearsOfExperience: ['', [Validators.required, Validators.min(0)]],
      skills: ['', Validators.required],
      availability: ['', Validators.required],
    });
  }

  ngOnInit(): void {}

  nextStep() {
    if (this.currentStep < this.steps.length - 1) {
      this.currentStep++;
    }
  }

  previousStep() {
    if (this.currentStep > 0) {
      this.currentStep--;
    }
  }

  onSubmit() {
    if (this.applicationForm.valid) {
      console.log('Form Submitted!', this.applicationForm.value);
      // Handle form submission (e.g., send data to the server)
    }
  }
}
Step 2: Create the Template
In job-application-modal.component.html, create the multi-step form:

html
Copy code
<div class="modal">
  <h2>{{ steps[currentStep].title }}</h2>
  <form [formGroup]="applicationForm" (ngSubmit)="onSubmit()">
    <ng-container *ngIf="currentStep === 0">
      <label for="yearsOfExperience">Years of Experience in AWS:</label>
      <input id="yearsOfExperience" formControlName="yearsOfExperience" type="number" />
    </ng-container>

    <ng-container *ngIf="currentStep === 1">
      <label for="skills">Relevant Skills:</label>
      <input id="skills" formControlName="skills" type="text" />
    </ng-container>

    <ng-container *ngIf="currentStep === 2">
      <label for="availability">Availability:</label>
      <input id="availability" formControlName="availability" type="text" />
    </ng-container>

    <div class="navigation">
      <button type="button" (click)="previousStep()" [disabled]="currentStep === 0">Previous</button>
      <button type="button" (click)="nextStep()" [disabled]="!applicationForm.valid">Next</button>
      <button type="submit" *ngIf="currentStep === steps.length - 1">Submit</button>
    </div>
  </form>
</div>
Step 3: Add Styling for the Modal
You can keep the previous styling for the modal. Just ensure the buttons are styled appropriately.

Step 4: Manage Navigation Between Steps
The nextStep and previousStep methods will control which part of the form the user sees. The form data is retained throughout the steps because it's all part of the same FormGroup.

Step 5: Handling Form Submission
When the user reaches the last step and clicks "Submit," the onSubmit method will handle the final data submission.

Example Final Structure:
Step 1: User enters years of experience.
Step 2: User enters relevant skills.
Step 3: User enters availability.
Finally, clicking "Submit" sends all the data at once.
This structure allows for easy addition or modification of steps as needed. Let me know if you need any further details or adjustments!