pipeline {
    agent any
    parameters {
        string(name: 'DEPLOY_VERSION', defaultValue: 'v1.0.0', description: 'Deployment version')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Git branch name')
        choice(name: 'TARGET_ENV', choices: ['dev', 'staging', 'prod'], description: 'Target environment')
    }
    environment {
        // Map environment to EC2 host
        EC2_HOSTS = [
            dev: 'ec2-user@dev-host-ip',
            staging: 'ec2-user@staging-host-ip',
            prod: 'ec2-user@prod-host-ip'
        ]
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.GIT_BRANCH}", url: 'git@github.com:your_repo/your_angular_project.git'
            }
        }
        stage('Build') {
            steps {
                // Install dependencies and build Angular app
                sh 'npm install'
                sh 'npx ng build --configuration production'
            }
        }
        stage('Deploy') {
            steps {
                script {
                    def host = EC2_HOSTS[params.TARGET_ENV]
                    sshagent(['ec2-key']) {
                        // Before deploying, backup current deployed folder on EC2 (for rollback)
                        sh """
                            ssh -o StrictHostKeyChecking=no ${host} '
                                if [ -d /var/www/html ]; then
                                    mv /var/www/html /var/www/html_backup_${params.DEPLOY_VERSION} || true
                                fi
                            '
                        """
                        // Copy new build files to EC2
                        sh """
                            scp -o StrictHostKeyChecking=no -r dist/your-project-name/* ${host}:/var/www/html/
                        """
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                def host = EC2_HOSTS[params.TARGET_ENV]
                sshagent(['ec2-key']) {
                    // Rollback: Restore backup on failure
                    sh """
                        ssh -o StrictHostKeyChecking=no ${host} '
                            if [ -d /var/www/html_backup_${params.DEPLOY_VERSION} ]; then
                                rm -rf /var/www/html
                                mv /var/www/html_backup_${params.DEPLOY_VERSION} /var/www/html
                            fi
                        '
                    """
                }
            }
        }
    }
}
